<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace shadowcodex\slackspec;

class Chat 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes a message.
     * 
     * https://api.slack.com/methods/chat.delete - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\ChatDeleteRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\ChatDeleteSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\ChatDeleteResponse
     * @see https://api.slack.com/methods/chat.delete
     */
	
    public function chatDelete(
        \shadowcodex\slackspec\Models\Operations\ChatDeleteRequest $request,
        \shadowcodex\slackspec\Models\Operations\ChatDeleteSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\ChatDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/chat.delete');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\ChatDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chatDeleteSuccessSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chatDeleteErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a pending scheduled message from the queue.
     * 
     * https://api.slack.com/methods/chat.deleteScheduledMessage - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\ChatDeleteScheduledMessageRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\ChatDeleteScheduledMessageSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\ChatDeleteScheduledMessageResponse
     * @see https://api.slack.com/methods/chat.deleteScheduledMessage
     */
	
    public function chatDeleteScheduledMessage(
        \shadowcodex\slackspec\Models\Operations\ChatDeleteScheduledMessageRequest $request,
        \shadowcodex\slackspec\Models\Operations\ChatDeleteScheduledMessageSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\ChatDeleteScheduledMessageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/chat.deleteScheduledMessage');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\ChatDeleteScheduledMessageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chatDeleteScheduledMessageSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chatDeleteScheduledMessageErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a permalink URL for a specific extant message
     * 
     * https://api.slack.com/methods/chat.getPermalink - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\ChatGetPermalinkRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\ChatGetPermalinkSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\ChatGetPermalinkResponse
     * @see https://api.slack.com/methods/chat.getPermalink
     */
	
    public function chatGetPermalink(
        \shadowcodex\slackspec\Models\Operations\ChatGetPermalinkRequest $request,
        \shadowcodex\slackspec\Models\Operations\ChatGetPermalinkSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\ChatGetPermalinkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/chat.getPermalink');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\shadowcodex\slackspec\Models\Operations\ChatGetPermalinkRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\ChatGetPermalinkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chatGetPermalinkSuccessSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chatGetPermalinkErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Share a me message into a channel.
     * 
     * https://api.slack.com/methods/chat.meMessage - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\ChatMeMessageRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\ChatMeMessageSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\ChatMeMessageResponse
     * @see https://api.slack.com/methods/chat.meMessage
     */
	
    public function chatMeMessage(
        \shadowcodex\slackspec\Models\Operations\ChatMeMessageRequest $request,
        \shadowcodex\slackspec\Models\Operations\ChatMeMessageSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\ChatMeMessageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/chat.meMessage');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\ChatMeMessageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chatMeMessageSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chatMeMessageErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sends an ephemeral message to a user in a channel.
     * 
     * https://api.slack.com/methods/chat.postEphemeral - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\ChatPostEphemeralRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\ChatPostEphemeralSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\ChatPostEphemeralResponse
     * @see https://api.slack.com/methods/chat.postEphemeral
     */
	
    public function chatPostEphemeral(
        \shadowcodex\slackspec\Models\Operations\ChatPostEphemeralRequest $request,
        \shadowcodex\slackspec\Models\Operations\ChatPostEphemeralSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\ChatPostEphemeralResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/chat.postEphemeral');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\ChatPostEphemeralResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chatPostEphemeralSuccessSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chatPostEphemeralErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sends a message to a channel.
     * 
     * https://api.slack.com/methods/chat.postMessage - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\ChatPostMessageRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\ChatPostMessageSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\ChatPostMessageResponse
     * @see https://api.slack.com/methods/chat.postMessage
     */
	
    public function chatPostMessage(
        \shadowcodex\slackspec\Models\Operations\ChatPostMessageRequest $request,
        \shadowcodex\slackspec\Models\Operations\ChatPostMessageSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\ChatPostMessageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/chat.postMessage');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\ChatPostMessageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chatPostMessageSuccessSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chatPostMessageErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Schedules a message to be sent to a channel.
     * 
     * https://api.slack.com/methods/chat.scheduleMessage - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\ChatScheduleMessageRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\ChatScheduleMessageSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\ChatScheduleMessageResponse
     * @see https://api.slack.com/methods/chat.scheduleMessage
     */
	
    public function chatScheduleMessage(
        \shadowcodex\slackspec\Models\Operations\ChatScheduleMessageRequest $request,
        \shadowcodex\slackspec\Models\Operations\ChatScheduleMessageSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\ChatScheduleMessageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/chat.scheduleMessage');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\ChatScheduleMessageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chatScheduleMessageSuccessSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chatScheduleMessageErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of scheduled messages.
     * 
     * https://api.slack.com/methods/chat.scheduledMessages.list - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\ChatScheduledMessagesListRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\ChatScheduledMessagesListSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\ChatScheduledMessagesListResponse
     * @see https://api.slack.com/methods/chat.scheduledMessages.list
     */
	
    public function chatScheduledMessagesList(
        \shadowcodex\slackspec\Models\Operations\ChatScheduledMessagesListRequest $request,
        \shadowcodex\slackspec\Models\Operations\ChatScheduledMessagesListSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\ChatScheduledMessagesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/chat.scheduledMessages.list');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\shadowcodex\slackspec\Models\Operations\ChatScheduledMessagesListRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\ChatScheduledMessagesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chatScheduledMessagesListSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chatScheduledMessagesListErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Provide custom unfurl behavior for user-posted URLs
     * 
     * https://api.slack.com/methods/chat.unfurl - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\ChatUnfurlRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\ChatUnfurlSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\ChatUnfurlResponse
     * @see https://api.slack.com/methods/chat.unfurl
     */
	
    public function chatUnfurl(
        \shadowcodex\slackspec\Models\Operations\ChatUnfurlRequest $request,
        \shadowcodex\slackspec\Models\Operations\ChatUnfurlSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\ChatUnfurlResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/chat.unfurl');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\ChatUnfurlResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chatUnfurlSuccessSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chatUnfurlErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a message.
     * 
     * https://api.slack.com/methods/chat.update - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\ChatUpdateRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\ChatUpdateSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\ChatUpdateResponse
     * @see https://api.slack.com/methods/chat.update
     */
	
    public function chatUpdate(
        \shadowcodex\slackspec\Models\Operations\ChatUpdateRequest $request,
        \shadowcodex\slackspec\Models\Operations\ChatUpdateSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\ChatUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/chat.update');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\ChatUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chatUpdateSuccessSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chatUpdateErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
}