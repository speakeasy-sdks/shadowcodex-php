<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace shadowcodex\slackspec;

class Admin 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Approve an app for installation on a workspace.
     * 
     * https://api.slack.com/methods/admin.apps.approve - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminAppsApproveRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminAppsApproveSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminAppsApproveResponse
     * @see https://api.slack.com/methods/admin.apps.approve
     */
	
    public function adminAppsApprove(
        \shadowcodex\slackspec\Models\Operations\AdminAppsApproveRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminAppsApproveSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminAppsApproveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.apps.approve');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminAppsApproveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List approved apps for an org or workspace.
     * 
     * https://api.slack.com/methods/admin.apps.approved.list - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminAppsApprovedListRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminAppsApprovedListSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminAppsApprovedListResponse
     * @see https://api.slack.com/methods/admin.apps.approved.list
     */
	
    public function adminAppsApprovedList(
        \shadowcodex\slackspec\Models\Operations\AdminAppsApprovedListRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminAppsApprovedListSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminAppsApprovedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.apps.approved.list');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\shadowcodex\slackspec\Models\Operations\AdminAppsApprovedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminAppsApprovedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List app requests for a team/workspace.
     * 
     * https://api.slack.com/methods/admin.apps.requests.list - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminAppsRequestsListRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminAppsRequestsListSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminAppsRequestsListResponse
     * @see https://api.slack.com/methods/admin.apps.requests.list
     */
	
    public function adminAppsRequestsList(
        \shadowcodex\slackspec\Models\Operations\AdminAppsRequestsListRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminAppsRequestsListSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminAppsRequestsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.apps.requests.list');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\shadowcodex\slackspec\Models\Operations\AdminAppsRequestsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminAppsRequestsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Restrict an app for installation on a workspace.
     * 
     * https://api.slack.com/methods/admin.apps.restrict - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminAppsRestrictRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminAppsRestrictSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminAppsRestrictResponse
     * @see https://api.slack.com/methods/admin.apps.restrict
     */
	
    public function adminAppsRestrict(
        \shadowcodex\slackspec\Models\Operations\AdminAppsRestrictRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminAppsRestrictSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminAppsRestrictResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.apps.restrict');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminAppsRestrictResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List restricted apps for an org or workspace.
     * 
     * https://api.slack.com/methods/admin.apps.restricted.list - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminAppsRestrictedListRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminAppsRestrictedListSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminAppsRestrictedListResponse
     * @see https://api.slack.com/methods/admin.apps.restricted.list
     */
	
    public function adminAppsRestrictedList(
        \shadowcodex\slackspec\Models\Operations\AdminAppsRestrictedListRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminAppsRestrictedListSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminAppsRestrictedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.apps.restricted.list');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\shadowcodex\slackspec\Models\Operations\AdminAppsRestrictedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminAppsRestrictedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Archive a public or private channel.
     * 
     * https://api.slack.com/methods/admin.conversations.archive - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsArchiveRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsArchiveSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminConversationsArchiveResponse
     * @see https://api.slack.com/methods/admin.conversations.archive
     */
	
    public function adminConversationsArchive(
        \shadowcodex\slackspec\Models\Operations\AdminConversationsArchiveRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminConversationsArchiveSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminConversationsArchiveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.conversations.archive');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminConversationsArchiveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsArchiveSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsArchiveErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Convert a public channel to a private channel.
     * 
     * https://api.slack.com/methods/admin.conversations.convertToPrivate - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsConvertToPrivateRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsConvertToPrivateSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminConversationsConvertToPrivateResponse
     * @see https://api.slack.com/methods/admin.conversations.convertToPrivate
     */
	
    public function adminConversationsConvertToPrivate(
        \shadowcodex\slackspec\Models\Operations\AdminConversationsConvertToPrivateRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminConversationsConvertToPrivateSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminConversationsConvertToPrivateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.conversations.convertToPrivate');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminConversationsConvertToPrivateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsConvertToPrivateSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsConvertToPrivateErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a public or private channel-based conversation.
     * 
     * https://api.slack.com/methods/admin.conversations.create - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsCreateRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsCreateSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminConversationsCreateResponse
     * @see https://api.slack.com/methods/admin.conversations.create
     */
	
    public function adminConversationsCreate(
        \shadowcodex\slackspec\Models\Operations\AdminConversationsCreateRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminConversationsCreateSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminConversationsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.conversations.create');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminConversationsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsCreateSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsCreateErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a public or private channel.
     * 
     * https://api.slack.com/methods/admin.conversations.delete - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsDeleteRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsDeleteSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminConversationsDeleteResponse
     * @see https://api.slack.com/methods/admin.conversations.delete
     */
	
    public function adminConversationsDelete(
        \shadowcodex\slackspec\Models\Operations\AdminConversationsDeleteRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminConversationsDeleteSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminConversationsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.conversations.delete');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminConversationsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsDeleteSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsDeleteErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Disconnect a connected channel from one or more workspaces.
     * 
     * https://api.slack.com/methods/admin.conversations.disconnectShared - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsDisconnectSharedRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsDisconnectSharedSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminConversationsDisconnectSharedResponse
     * @see https://api.slack.com/methods/admin.conversations.disconnectShared
     */
	
    public function adminConversationsDisconnectShared(
        \shadowcodex\slackspec\Models\Operations\AdminConversationsDisconnectSharedRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminConversationsDisconnectSharedSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminConversationsDisconnectSharedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.conversations.disconnectShared');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminConversationsDisconnectSharedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsRenameSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsDisconnectSharedErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all disconnected channels—i.e., channels that were once connected to other workspaces and then disconnected—and the corresponding original channel IDs for key revocation with EKM.
     * 
     * https://api.slack.com/methods/admin.conversations.ekm.listOriginalConnectedChannelInfo - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsEkmListOriginalConnectedChannelInfoRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsEkmListOriginalConnectedChannelInfoSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminConversationsEkmListOriginalConnectedChannelInfoResponse
     * @see https://api.slack.com/methods/admin.conversations.ekm.listOriginalConnectedChannelInfo
     */
	
    public function adminConversationsEkmListOriginalConnectedChannelInfo(
        \shadowcodex\slackspec\Models\Operations\AdminConversationsEkmListOriginalConnectedChannelInfoRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminConversationsEkmListOriginalConnectedChannelInfoSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminConversationsEkmListOriginalConnectedChannelInfoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.conversations.ekm.listOriginalConnectedChannelInfo');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\shadowcodex\slackspec\Models\Operations\AdminConversationsEkmListOriginalConnectedChannelInfoRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminConversationsEkmListOriginalConnectedChannelInfoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get conversation preferences for a public or private channel.
     * 
     * https://api.slack.com/methods/admin.conversations.getConversationPrefs - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsGetConversationPrefsRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsGetConversationPrefsSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminConversationsGetConversationPrefsResponse
     * @see https://api.slack.com/methods/admin.conversations.getConversationPrefs
     */
	
    public function adminConversationsGetConversationPrefs(
        \shadowcodex\slackspec\Models\Operations\AdminConversationsGetConversationPrefsRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminConversationsGetConversationPrefsSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminConversationsGetConversationPrefsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.conversations.getConversationPrefs');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\shadowcodex\slackspec\Models\Operations\AdminConversationsGetConversationPrefsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminConversationsGetConversationPrefsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsGetConversationPrefsSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsUnarchiveErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all the workspaces a given public or private channel is connected to within this Enterprise org.
     * 
     * https://api.slack.com/methods/admin.conversations.getTeams - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsGetTeamsRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsGetTeamsSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminConversationsGetTeamsResponse
     * @see https://api.slack.com/methods/admin.conversations.getTeams
     */
	
    public function adminConversationsGetTeams(
        \shadowcodex\slackspec\Models\Operations\AdminConversationsGetTeamsRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminConversationsGetTeamsSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminConversationsGetTeamsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.conversations.getTeams');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\shadowcodex\slackspec\Models\Operations\AdminConversationsGetTeamsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminConversationsGetTeamsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsGetTeamsSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsGetTeamsErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Invite a user to a public or private channel.
     * 
     * https://api.slack.com/methods/admin.conversations.invite - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsInviteRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsInviteSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminConversationsInviteResponse
     * @see https://api.slack.com/methods/admin.conversations.invite
     */
	
    public function adminConversationsInvite(
        \shadowcodex\slackspec\Models\Operations\AdminConversationsInviteRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminConversationsInviteSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminConversationsInviteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.conversations.invite');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminConversationsInviteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsInviteSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsInviteErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Rename a public or private channel.
     * 
     * https://api.slack.com/methods/admin.conversations.rename - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsRenameRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsRenameSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminConversationsRenameResponse
     * @see https://api.slack.com/methods/admin.conversations.rename
     */
	
    public function adminConversationsRename(
        \shadowcodex\slackspec\Models\Operations\AdminConversationsRenameRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminConversationsRenameSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminConversationsRenameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.conversations.rename');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminConversationsRenameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsRenameSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsUnarchiveErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add an allowlist of IDP groups for accessing a channel
     * 
     * https://api.slack.com/methods/admin.conversations.restrictAccess.addGroup - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsRestrictAccessAddGroupRequestBody $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsRestrictAccessAddGroupSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminConversationsRestrictAccessAddGroupResponse
     * @see https://api.slack.com/methods/admin.conversations.restrictAccess.addGroup
     */
	
    public function adminConversationsRestrictAccessAddGroup(
        \shadowcodex\slackspec\Models\Operations\AdminConversationsRestrictAccessAddGroupRequestBody $request,
        \shadowcodex\slackspec\Models\Operations\AdminConversationsRestrictAccessAddGroupSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminConversationsRestrictAccessAddGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.conversations.restrictAccess.addGroup');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminConversationsRestrictAccessAddGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all IDP Groups linked to a channel
     * 
     * https://api.slack.com/methods/admin.conversations.restrictAccess.listGroups - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsRestrictAccessListGroupsRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsRestrictAccessListGroupsSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminConversationsRestrictAccessListGroupsResponse
     * @see https://api.slack.com/methods/admin.conversations.restrictAccess.listGroups
     */
	
    public function adminConversationsRestrictAccessListGroups(
        \shadowcodex\slackspec\Models\Operations\AdminConversationsRestrictAccessListGroupsRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminConversationsRestrictAccessListGroupsSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminConversationsRestrictAccessListGroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.conversations.restrictAccess.listGroups');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\shadowcodex\slackspec\Models\Operations\AdminConversationsRestrictAccessListGroupsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminConversationsRestrictAccessListGroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove a linked IDP group linked from a private channel
     * 
     * https://api.slack.com/methods/admin.conversations.restrictAccess.removeGroup - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsRestrictAccessRemoveGroupRequestBody $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsRestrictAccessRemoveGroupSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminConversationsRestrictAccessRemoveGroupResponse
     * @see https://api.slack.com/methods/admin.conversations.restrictAccess.removeGroup
     */
	
    public function adminConversationsRestrictAccessRemoveGroup(
        \shadowcodex\slackspec\Models\Operations\AdminConversationsRestrictAccessRemoveGroupRequestBody $request,
        \shadowcodex\slackspec\Models\Operations\AdminConversationsRestrictAccessRemoveGroupSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminConversationsRestrictAccessRemoveGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.conversations.restrictAccess.removeGroup');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminConversationsRestrictAccessRemoveGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Search for public or private channels in an Enterprise organization.
     * 
     * https://api.slack.com/methods/admin.conversations.search - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsSearchRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsSearchSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminConversationsSearchResponse
     * @see https://api.slack.com/methods/admin.conversations.search
     */
	
    public function adminConversationsSearch(
        \shadowcodex\slackspec\Models\Operations\AdminConversationsSearchRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminConversationsSearchSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminConversationsSearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.conversations.search');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\shadowcodex\slackspec\Models\Operations\AdminConversationsSearchRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminConversationsSearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsSearchSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsSearchErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Set the posting permissions for a public or private channel.
     * 
     * https://api.slack.com/methods/admin.conversations.setConversationPrefs - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsSetConversationPrefsRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsSetConversationPrefsSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminConversationsSetConversationPrefsResponse
     * @see https://api.slack.com/methods/admin.conversations.setConversationPrefs
     */
	
    public function adminConversationsSetConversationPrefs(
        \shadowcodex\slackspec\Models\Operations\AdminConversationsSetConversationPrefsRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminConversationsSetConversationPrefsSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminConversationsSetConversationPrefsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.conversations.setConversationPrefs');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminConversationsSetConversationPrefsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsSetConversationPrefsSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsSetConversationPrefsErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Set the workspaces in an Enterprise grid org that connect to a public or private channel.
     * 
     * https://api.slack.com/methods/admin.conversations.setTeams - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsSetTeamsRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsSetTeamsSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminConversationsSetTeamsResponse
     * @see https://api.slack.com/methods/admin.conversations.setTeams
     */
	
    public function adminConversationsSetTeams(
        \shadowcodex\slackspec\Models\Operations\AdminConversationsSetTeamsRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminConversationsSetTeamsSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminConversationsSetTeamsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.conversations.setTeams');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminConversationsSetTeamsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Unarchive a public or private channel.
     * 
     * https://api.slack.com/methods/admin.conversations.unarchive - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsUnarchiveRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsUnarchiveSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminConversationsUnarchiveResponse
     * @see https://api.slack.com/methods/admin.conversations.unarchive
     */
	
    public function adminConversationsUnarchive(
        \shadowcodex\slackspec\Models\Operations\AdminConversationsUnarchiveRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminConversationsUnarchiveSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminConversationsUnarchiveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.conversations.unarchive');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminConversationsUnarchiveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsUnarchiveSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsUnarchiveErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add an emoji.
     * 
     * https://api.slack.com/methods/admin.emoji.add - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminEmojiAddRequestBody $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminEmojiAddSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminEmojiAddResponse
     * @see https://api.slack.com/methods/admin.emoji.add
     */
	
    public function adminEmojiAdd(
        \shadowcodex\slackspec\Models\Operations\AdminEmojiAddRequestBody $request,
        \shadowcodex\slackspec\Models\Operations\AdminEmojiAddSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminEmojiAddResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.emoji.add');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminEmojiAddResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add an emoji alias.
     * 
     * https://api.slack.com/methods/admin.emoji.addAlias - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminEmojiAddAliasRequestBody $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminEmojiAddAliasSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminEmojiAddAliasResponse
     * @see https://api.slack.com/methods/admin.emoji.addAlias
     */
	
    public function adminEmojiAddAlias(
        \shadowcodex\slackspec\Models\Operations\AdminEmojiAddAliasRequestBody $request,
        \shadowcodex\slackspec\Models\Operations\AdminEmojiAddAliasSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminEmojiAddAliasResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.emoji.addAlias');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminEmojiAddAliasResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List emoji for an Enterprise Grid organization.
     * 
     * https://api.slack.com/methods/admin.emoji.list - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminEmojiListRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminEmojiListSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminEmojiListResponse
     * @see https://api.slack.com/methods/admin.emoji.list
     */
	
    public function adminEmojiList(
        \shadowcodex\slackspec\Models\Operations\AdminEmojiListRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminEmojiListSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminEmojiListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.emoji.list');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\shadowcodex\slackspec\Models\Operations\AdminEmojiListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminEmojiListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove an emoji across an Enterprise Grid organization
     * 
     * https://api.slack.com/methods/admin.emoji.remove - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminEmojiRemoveRequestBody $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminEmojiRemoveSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminEmojiRemoveResponse
     * @see https://api.slack.com/methods/admin.emoji.remove
     */
	
    public function adminEmojiRemove(
        \shadowcodex\slackspec\Models\Operations\AdminEmojiRemoveRequestBody $request,
        \shadowcodex\slackspec\Models\Operations\AdminEmojiRemoveSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminEmojiRemoveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.emoji.remove');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminEmojiRemoveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Rename an emoji.
     * 
     * https://api.slack.com/methods/admin.emoji.rename - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminEmojiRenameRequestBody $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminEmojiRenameSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminEmojiRenameResponse
     * @see https://api.slack.com/methods/admin.emoji.rename
     */
	
    public function adminEmojiRename(
        \shadowcodex\slackspec\Models\Operations\AdminEmojiRenameRequestBody $request,
        \shadowcodex\slackspec\Models\Operations\AdminEmojiRenameSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminEmojiRenameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.emoji.rename');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminEmojiRenameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Approve a workspace invite request.
     * 
     * https://api.slack.com/methods/admin.inviteRequests.approve - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminInviteRequestsApproveRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminInviteRequestsApproveSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminInviteRequestsApproveResponse
     * @see https://api.slack.com/methods/admin.inviteRequests.approve
     */
	
    public function adminInviteRequestsApprove(
        \shadowcodex\slackspec\Models\Operations\AdminInviteRequestsApproveRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminInviteRequestsApproveSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminInviteRequestsApproveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.inviteRequests.approve');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminInviteRequestsApproveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all approved workspace invite requests.
     * 
     * https://api.slack.com/methods/admin.inviteRequests.approved.list - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminInviteRequestsApprovedListRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminInviteRequestsApprovedListSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminInviteRequestsApprovedListResponse
     * @see https://api.slack.com/methods/admin.inviteRequests.approved.list
     */
	
    public function adminInviteRequestsApprovedList(
        \shadowcodex\slackspec\Models\Operations\AdminInviteRequestsApprovedListRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminInviteRequestsApprovedListSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminInviteRequestsApprovedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.inviteRequests.approved.list');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\shadowcodex\slackspec\Models\Operations\AdminInviteRequestsApprovedListRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminInviteRequestsApprovedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all denied workspace invite requests.
     * 
     * https://api.slack.com/methods/admin.inviteRequests.denied.list - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminInviteRequestsDeniedListRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminInviteRequestsDeniedListSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminInviteRequestsDeniedListResponse
     * @see https://api.slack.com/methods/admin.inviteRequests.denied.list
     */
	
    public function adminInviteRequestsDeniedList(
        \shadowcodex\slackspec\Models\Operations\AdminInviteRequestsDeniedListRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminInviteRequestsDeniedListSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminInviteRequestsDeniedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.inviteRequests.denied.list');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\shadowcodex\slackspec\Models\Operations\AdminInviteRequestsDeniedListRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminInviteRequestsDeniedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deny a workspace invite request.
     * 
     * https://api.slack.com/methods/admin.inviteRequests.deny - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminInviteRequestsDenyRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminInviteRequestsDenySecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminInviteRequestsDenyResponse
     * @see https://api.slack.com/methods/admin.inviteRequests.deny
     */
	
    public function adminInviteRequestsDeny(
        \shadowcodex\slackspec\Models\Operations\AdminInviteRequestsDenyRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminInviteRequestsDenySecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminInviteRequestsDenyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.inviteRequests.deny');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminInviteRequestsDenyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all pending workspace invite requests.
     * 
     * https://api.slack.com/methods/admin.inviteRequests.list - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminInviteRequestsListRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminInviteRequestsListSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminInviteRequestsListResponse
     * @see https://api.slack.com/methods/admin.inviteRequests.list
     */
	
    public function adminInviteRequestsList(
        \shadowcodex\slackspec\Models\Operations\AdminInviteRequestsListRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminInviteRequestsListSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminInviteRequestsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.inviteRequests.list');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\shadowcodex\slackspec\Models\Operations\AdminInviteRequestsListRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminInviteRequestsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all of the admins on a given workspace.
     * 
     * https://api.slack.com/methods/admin.teams.admins.list - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminTeamsAdminsListRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminTeamsAdminsListSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminTeamsAdminsListResponse
     * @see https://api.slack.com/methods/admin.teams.admins.list
     */
	
    public function adminTeamsAdminsList(
        \shadowcodex\slackspec\Models\Operations\AdminTeamsAdminsListRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminTeamsAdminsListSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminTeamsAdminsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.teams.admins.list');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\shadowcodex\slackspec\Models\Operations\AdminTeamsAdminsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminTeamsAdminsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an Enterprise team.
     * 
     * https://api.slack.com/methods/admin.teams.create - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminTeamsCreateRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminTeamsCreateSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminTeamsCreateResponse
     * @see https://api.slack.com/methods/admin.teams.create
     */
	
    public function adminTeamsCreate(
        \shadowcodex\slackspec\Models\Operations\AdminTeamsCreateRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminTeamsCreateSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminTeamsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.teams.create');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminTeamsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all teams on an Enterprise organization
     * 
     * https://api.slack.com/methods/admin.teams.list - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminTeamsListRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminTeamsListSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminTeamsListResponse
     * @see https://api.slack.com/methods/admin.teams.list
     */
	
    public function adminTeamsList(
        \shadowcodex\slackspec\Models\Operations\AdminTeamsListRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminTeamsListSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminTeamsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.teams.list');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\shadowcodex\slackspec\Models\Operations\AdminTeamsListRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminTeamsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all of the owners on a given workspace.
     * 
     * https://api.slack.com/methods/admin.teams.owners.list - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminTeamsOwnersListRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminTeamsOwnersListSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminTeamsOwnersListResponse
     * @see https://api.slack.com/methods/admin.teams.owners.list
     */
	
    public function adminTeamsOwnersList(
        \shadowcodex\slackspec\Models\Operations\AdminTeamsOwnersListRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminTeamsOwnersListSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminTeamsOwnersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.teams.owners.list');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\shadowcodex\slackspec\Models\Operations\AdminTeamsOwnersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminTeamsOwnersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch information about settings in a workspace
     * 
     * https://api.slack.com/methods/admin.teams.settings.info - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminTeamsSettingsInfoRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminTeamsSettingsInfoSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminTeamsSettingsInfoResponse
     * @see https://api.slack.com/methods/admin.teams.settings.info
     */
	
    public function adminTeamsSettingsInfo(
        \shadowcodex\slackspec\Models\Operations\AdminTeamsSettingsInfoRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminTeamsSettingsInfoSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminTeamsSettingsInfoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.teams.settings.info');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\shadowcodex\slackspec\Models\Operations\AdminTeamsSettingsInfoRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminTeamsSettingsInfoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Set the default channels of a workspace.
     * 
     * https://api.slack.com/methods/admin.teams.settings.setDefaultChannels - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminTeamsSettingsSetDefaultChannelsRequestBody $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminTeamsSettingsSetDefaultChannelsSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminTeamsSettingsSetDefaultChannelsResponse
     * @see https://api.slack.com/methods/admin.teams.settings.setDefaultChannels
     */
	
    public function adminTeamsSettingsSetDefaultChannels(
        \shadowcodex\slackspec\Models\Operations\AdminTeamsSettingsSetDefaultChannelsRequestBody $request,
        \shadowcodex\slackspec\Models\Operations\AdminTeamsSettingsSetDefaultChannelsSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminTeamsSettingsSetDefaultChannelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.teams.settings.setDefaultChannels');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminTeamsSettingsSetDefaultChannelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Set the description of a given workspace.
     * 
     * https://api.slack.com/methods/admin.teams.settings.setDescription - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminTeamsSettingsSetDescriptionRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminTeamsSettingsSetDescriptionSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminTeamsSettingsSetDescriptionResponse
     * @see https://api.slack.com/methods/admin.teams.settings.setDescription
     */
	
    public function adminTeamsSettingsSetDescription(
        \shadowcodex\slackspec\Models\Operations\AdminTeamsSettingsSetDescriptionRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminTeamsSettingsSetDescriptionSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminTeamsSettingsSetDescriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.teams.settings.setDescription');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminTeamsSettingsSetDescriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * An API method that allows admins to set the discoverability of a given workspace
     * 
     * https://api.slack.com/methods/admin.teams.settings.setDiscoverability - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminTeamsSettingsSetDiscoverabilityRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminTeamsSettingsSetDiscoverabilitySecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminTeamsSettingsSetDiscoverabilityResponse
     * @see https://api.slack.com/methods/admin.teams.settings.setDiscoverability
     */
	
    public function adminTeamsSettingsSetDiscoverability(
        \shadowcodex\slackspec\Models\Operations\AdminTeamsSettingsSetDiscoverabilityRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminTeamsSettingsSetDiscoverabilitySecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminTeamsSettingsSetDiscoverabilityResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.teams.settings.setDiscoverability');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminTeamsSettingsSetDiscoverabilityResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the icon of a workspace.
     * 
     * https://api.slack.com/methods/admin.teams.settings.setIcon - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminTeamsSettingsSetIconRequestBody $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminTeamsSettingsSetIconSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminTeamsSettingsSetIconResponse
     * @see https://api.slack.com/methods/admin.teams.settings.setIcon
     */
	
    public function adminTeamsSettingsSetIcon(
        \shadowcodex\slackspec\Models\Operations\AdminTeamsSettingsSetIconRequestBody $request,
        \shadowcodex\slackspec\Models\Operations\AdminTeamsSettingsSetIconSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminTeamsSettingsSetIconResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.teams.settings.setIcon');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminTeamsSettingsSetIconResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Set the name of a given workspace.
     * 
     * https://api.slack.com/methods/admin.teams.settings.setName - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminTeamsSettingsSetNameRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminTeamsSettingsSetNameSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminTeamsSettingsSetNameResponse
     * @see https://api.slack.com/methods/admin.teams.settings.setName
     */
	
    public function adminTeamsSettingsSetName(
        \shadowcodex\slackspec\Models\Operations\AdminTeamsSettingsSetNameRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminTeamsSettingsSetNameSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminTeamsSettingsSetNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.teams.settings.setName');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminTeamsSettingsSetNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add one or more default channels to an IDP group.
     * 
     * https://api.slack.com/methods/admin.usergroups.addChannels - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminUsergroupsAddChannelsRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminUsergroupsAddChannelsSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminUsergroupsAddChannelsResponse
     * @see https://api.slack.com/methods/admin.usergroups.addChannels
     */
	
    public function adminUsergroupsAddChannels(
        \shadowcodex\slackspec\Models\Operations\AdminUsergroupsAddChannelsRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminUsergroupsAddChannelsSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminUsergroupsAddChannelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.usergroups.addChannels');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminUsergroupsAddChannelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Associate one or more default workspaces with an organization-wide IDP group.
     * 
     * https://api.slack.com/methods/admin.usergroups.addTeams - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminUsergroupsAddTeamsRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminUsergroupsAddTeamsSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminUsergroupsAddTeamsResponse
     * @see https://api.slack.com/methods/admin.usergroups.addTeams
     */
	
    public function adminUsergroupsAddTeams(
        \shadowcodex\slackspec\Models\Operations\AdminUsergroupsAddTeamsRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminUsergroupsAddTeamsSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminUsergroupsAddTeamsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.usergroups.addTeams');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminUsergroupsAddTeamsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the channels linked to an org-level IDP group (user group).
     * 
     * https://api.slack.com/methods/admin.usergroups.listChannels - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminUsergroupsListChannelsRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminUsergroupsListChannelsSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminUsergroupsListChannelsResponse
     * @see https://api.slack.com/methods/admin.usergroups.listChannels
     */
	
    public function adminUsergroupsListChannels(
        \shadowcodex\slackspec\Models\Operations\AdminUsergroupsListChannelsRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminUsergroupsListChannelsSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminUsergroupsListChannelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.usergroups.listChannels');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\shadowcodex\slackspec\Models\Operations\AdminUsergroupsListChannelsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminUsergroupsListChannelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove one or more default channels from an org-level IDP group (user group).
     * 
     * https://api.slack.com/methods/admin.usergroups.removeChannels - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminUsergroupsRemoveChannelsRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminUsergroupsRemoveChannelsSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminUsergroupsRemoveChannelsResponse
     * @see https://api.slack.com/methods/admin.usergroups.removeChannels
     */
	
    public function adminUsergroupsRemoveChannels(
        \shadowcodex\slackspec\Models\Operations\AdminUsergroupsRemoveChannelsRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminUsergroupsRemoveChannelsSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminUsergroupsRemoveChannelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.usergroups.removeChannels');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminUsergroupsRemoveChannelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add an Enterprise user to a workspace.
     * 
     * https://api.slack.com/methods/admin.users.assign - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminUsersAssignRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminUsersAssignSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminUsersAssignResponse
     * @see https://api.slack.com/methods/admin.users.assign
     */
	
    public function adminUsersAssign(
        \shadowcodex\slackspec\Models\Operations\AdminUsersAssignRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminUsersAssignSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminUsersAssignResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.users.assign');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminUsersAssignResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Invite a user to a workspace.
     * 
     * https://api.slack.com/methods/admin.users.invite - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminUsersInviteRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminUsersInviteSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminUsersInviteResponse
     * @see https://api.slack.com/methods/admin.users.invite
     */
	
    public function adminUsersInvite(
        \shadowcodex\slackspec\Models\Operations\AdminUsersInviteRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminUsersInviteSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminUsersInviteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.users.invite');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminUsersInviteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List users on a workspace
     * 
     * https://api.slack.com/methods/admin.users.list - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminUsersListRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminUsersListSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminUsersListResponse
     * @see https://api.slack.com/methods/admin.users.list
     */
	
    public function adminUsersList(
        \shadowcodex\slackspec\Models\Operations\AdminUsersListRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminUsersListSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminUsersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.users.list');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\shadowcodex\slackspec\Models\Operations\AdminUsersListRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminUsersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove a user from a workspace.
     * 
     * https://api.slack.com/methods/admin.users.remove - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminUsersRemoveRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminUsersRemoveSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminUsersRemoveResponse
     * @see https://api.slack.com/methods/admin.users.remove
     */
	
    public function adminUsersRemove(
        \shadowcodex\slackspec\Models\Operations\AdminUsersRemoveRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminUsersRemoveSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminUsersRemoveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.users.remove');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminUsersRemoveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Invalidate a single session for a user by session_id
     * 
     * https://api.slack.com/methods/admin.users.session.invalidate - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminUsersSessionInvalidateRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminUsersSessionInvalidateSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminUsersSessionInvalidateResponse
     * @see https://api.slack.com/methods/admin.users.session.invalidate
     */
	
    public function adminUsersSessionInvalidate(
        \shadowcodex\slackspec\Models\Operations\AdminUsersSessionInvalidateRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminUsersSessionInvalidateSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminUsersSessionInvalidateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.users.session.invalidate');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminUsersSessionInvalidateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Wipes all valid sessions on all devices for a given user
     * 
     * https://api.slack.com/methods/admin.users.session.reset - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminUsersSessionResetRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminUsersSessionResetSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminUsersSessionResetResponse
     * @see https://api.slack.com/methods/admin.users.session.reset
     */
	
    public function adminUsersSessionReset(
        \shadowcodex\slackspec\Models\Operations\AdminUsersSessionResetRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminUsersSessionResetSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminUsersSessionResetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.users.session.reset');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminUsersSessionResetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Set an existing guest, regular user, or owner to be an admin user.
     * 
     * https://api.slack.com/methods/admin.users.setAdmin - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminUsersSetAdminRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminUsersSetAdminSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminUsersSetAdminResponse
     * @see https://api.slack.com/methods/admin.users.setAdmin
     */
	
    public function adminUsersSetAdmin(
        \shadowcodex\slackspec\Models\Operations\AdminUsersSetAdminRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminUsersSetAdminSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminUsersSetAdminResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.users.setAdmin');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminUsersSetAdminResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Set an expiration for a guest user
     * 
     * https://api.slack.com/methods/admin.users.setExpiration - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminUsersSetExpirationRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminUsersSetExpirationSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminUsersSetExpirationResponse
     * @see https://api.slack.com/methods/admin.users.setExpiration
     */
	
    public function adminUsersSetExpiration(
        \shadowcodex\slackspec\Models\Operations\AdminUsersSetExpirationRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminUsersSetExpirationSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminUsersSetExpirationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.users.setExpiration');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminUsersSetExpirationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Set an existing guest, regular user, or admin user to be a workspace owner.
     * 
     * https://api.slack.com/methods/admin.users.setOwner - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminUsersSetOwnerRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminUsersSetOwnerSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminUsersSetOwnerResponse
     * @see https://api.slack.com/methods/admin.users.setOwner
     */
	
    public function adminUsersSetOwner(
        \shadowcodex\slackspec\Models\Operations\AdminUsersSetOwnerRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminUsersSetOwnerSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminUsersSetOwnerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.users.setOwner');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminUsersSetOwnerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Set an existing guest user, admin user, or owner to be a regular user.
     * 
     * https://api.slack.com/methods/admin.users.setRegular - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminUsersSetRegularRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminUsersSetRegularSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminUsersSetRegularResponse
     * @see https://api.slack.com/methods/admin.users.setRegular
     */
	
    public function adminUsersSetRegular(
        \shadowcodex\slackspec\Models\Operations\AdminUsersSetRegularRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminUsersSetRegularSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminUsersSetRegularResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.users.setRegular');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminUsersSetRegularResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
}