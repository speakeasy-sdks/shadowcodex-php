<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace shadowcodex\slackspec;

class Users 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * List conversations the calling user may access.
     * 
     * https://api.slack.com/methods/users.conversations - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\UsersConversationsRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\UsersConversationsSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\UsersConversationsResponse
     * @see https://api.slack.com/methods/users.conversations
     */
	
    public function usersConversations(
        \shadowcodex\slackspec\Models\Operations\UsersConversationsRequest $request,
        \shadowcodex\slackspec\Models\Operations\UsersConversationsSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\UsersConversationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users.conversations');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\shadowcodex\slackspec\Models\Operations\UsersConversationsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\UsersConversationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usersConversationsSuccessSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usersConversationsErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete the user profile photo
     * 
     * https://api.slack.com/methods/users.deletePhoto - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\UsersDeletePhotoRequestBody $request
     * @param \shadowcodex\slackspec\Models\Operations\UsersDeletePhotoSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\UsersDeletePhotoResponse
     * @see https://api.slack.com/methods/users.deletePhoto
     */
	
    public function usersDeletePhoto(
        \shadowcodex\slackspec\Models\Operations\UsersDeletePhotoRequestBody $request,
        \shadowcodex\slackspec\Models\Operations\UsersDeletePhotoSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\UsersDeletePhotoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users.deletePhoto');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\UsersDeletePhotoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usersDeletePhotoSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usersDeletePhotoErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets user presence information.
     * 
     * https://api.slack.com/methods/users.getPresence - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\UsersGetPresenceRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\UsersGetPresenceSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\UsersGetPresenceResponse
     * @see https://api.slack.com/methods/users.getPresence
     */
	
    public function usersGetPresence(
        \shadowcodex\slackspec\Models\Operations\UsersGetPresenceRequest $request,
        \shadowcodex\slackspec\Models\Operations\UsersGetPresenceSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\UsersGetPresenceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users.getPresence');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\shadowcodex\slackspec\Models\Operations\UsersGetPresenceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\UsersGetPresenceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiMethodUsersGetPresence = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usersCountsErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a user's identity.
     * 
     * https://api.slack.com/methods/users.identity - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\UsersIdentityRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\UsersIdentitySecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\UsersIdentityResponse
     * @see https://api.slack.com/methods/users.identity
     */
	
    public function usersIdentity(
        \shadowcodex\slackspec\Models\Operations\UsersIdentityRequest $request,
        \shadowcodex\slackspec\Models\Operations\UsersIdentitySecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\UsersIdentityResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users.identity');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\shadowcodex\slackspec\Models\Operations\UsersIdentityRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\UsersIdentityResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usersIdentitySchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usersIdentityErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets information about a user.
     * 
     * https://api.slack.com/methods/users.info - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\UsersInfoRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\UsersInfoSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\UsersInfoResponse
     * @see https://api.slack.com/methods/users.info
     */
	
    public function usersInfo(
        \shadowcodex\slackspec\Models\Operations\UsersInfoRequest $request,
        \shadowcodex\slackspec\Models\Operations\UsersInfoSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\UsersInfoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users.info');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\shadowcodex\slackspec\Models\Operations\UsersInfoRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\UsersInfoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usersInfoSuccessSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usersInfoErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all users in a Slack team.
     * 
     * https://api.slack.com/methods/users.list - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\UsersListRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\UsersListSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\UsersListResponse
     * @see https://api.slack.com/methods/users.list
     */
	
    public function usersList(
        \shadowcodex\slackspec\Models\Operations\UsersListRequest $request,
        \shadowcodex\slackspec\Models\Operations\UsersListSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\UsersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users.list');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\shadowcodex\slackspec\Models\Operations\UsersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\UsersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usersListSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usersListErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find a user with an email address.
     * 
     * https://api.slack.com/methods/users.lookupByEmail - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\UsersLookupByEmailRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\UsersLookupByEmailSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\UsersLookupByEmailResponse
     * @see https://api.slack.com/methods/users.lookupByEmail
     */
	
    public function usersLookupByEmail(
        \shadowcodex\slackspec\Models\Operations\UsersLookupByEmailRequest $request,
        \shadowcodex\slackspec\Models\Operations\UsersLookupByEmailSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\UsersLookupByEmailResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users.lookupByEmail');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\shadowcodex\slackspec\Models\Operations\UsersLookupByEmailRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\UsersLookupByEmailResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usersLookupByEmailSuccessSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usersLookupByEmailErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a user's profile information.
     * 
     * https://api.slack.com/methods/users.profile.get - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\UsersProfileGetRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\UsersProfileGetSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\UsersProfileGetResponse
     * @see https://api.slack.com/methods/users.profile.get
     */
	
    public function usersProfileGet(
        \shadowcodex\slackspec\Models\Operations\UsersProfileGetRequest $request,
        \shadowcodex\slackspec\Models\Operations\UsersProfileGetSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\UsersProfileGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users.profile.get');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\shadowcodex\slackspec\Models\Operations\UsersProfileGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\UsersProfileGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usersProfileGetSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usersProfileGetErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Set the profile information for a user.
     * 
     * https://api.slack.com/methods/users.profile.set - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\UsersProfileSetRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\UsersProfileSetSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\UsersProfileSetResponse
     * @see https://api.slack.com/methods/users.profile.set
     */
	
    public function usersProfileSet(
        \shadowcodex\slackspec\Models\Operations\UsersProfileSetRequest $request,
        \shadowcodex\slackspec\Models\Operations\UsersProfileSetSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\UsersProfileSetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users.profile.set');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\UsersProfileSetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usersProfileSetSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usersProfileSetErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Marked a user as active. Deprecated and non-functional.
     * 
     * https://api.slack.com/methods/users.setActive - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\UsersSetActiveRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\UsersSetActiveSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\UsersSetActiveResponse
     * @see https://api.slack.com/methods/users.setActive
     */
	
    public function usersSetActive(
        \shadowcodex\slackspec\Models\Operations\UsersSetActiveRequest $request,
        \shadowcodex\slackspec\Models\Operations\UsersSetActiveSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\UsersSetActiveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users.setActive');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\UsersSetActiveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usersSetActiveSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usersSetActiveErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Set the user profile photo
     * 
     * https://api.slack.com/methods/users.setPhoto - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\UsersSetPhotoRequestBody $request
     * @param \shadowcodex\slackspec\Models\Operations\UsersSetPhotoSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\UsersSetPhotoResponse
     * @see https://api.slack.com/methods/users.setPhoto
     */
	
    public function usersSetPhoto(
        \shadowcodex\slackspec\Models\Operations\UsersSetPhotoRequestBody $request,
        \shadowcodex\slackspec\Models\Operations\UsersSetPhotoSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\UsersSetPhotoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users.setPhoto');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\UsersSetPhotoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usersSetPhotoSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usersSetPhotoErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Manually sets user presence.
     * 
     * https://api.slack.com/methods/users.setPresence - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\UsersSetPresenceRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\UsersSetPresenceSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\UsersSetPresenceResponse
     * @see https://api.slack.com/methods/users.setPresence
     */
	
    public function usersSetPresence(
        \shadowcodex\slackspec\Models\Operations\UsersSetPresenceRequest $request,
        \shadowcodex\slackspec\Models\Operations\UsersSetPresenceSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\UsersSetPresenceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users.setPresence');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\UsersSetPresenceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usersSetPresenceSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usersSetPresenceErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
}