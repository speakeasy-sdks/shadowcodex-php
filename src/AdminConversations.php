<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace shadowcodex\slackspec;

class AdminConversations 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Archive a public or private channel.
     * 
     * https://api.slack.com/methods/admin.conversations.archive - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsArchiveRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsArchiveSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminConversationsArchiveResponse
     * @see https://api.slack.com/methods/admin.conversations.archive
     */
	
    public function adminConversationsArchive(
        \shadowcodex\slackspec\Models\Operations\AdminConversationsArchiveRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminConversationsArchiveSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminConversationsArchiveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.conversations.archive');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminConversationsArchiveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsArchiveSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsArchiveErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Convert a public channel to a private channel.
     * 
     * https://api.slack.com/methods/admin.conversations.convertToPrivate - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsConvertToPrivateRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsConvertToPrivateSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminConversationsConvertToPrivateResponse
     * @see https://api.slack.com/methods/admin.conversations.convertToPrivate
     */
	
    public function adminConversationsConvertToPrivate(
        \shadowcodex\slackspec\Models\Operations\AdminConversationsConvertToPrivateRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminConversationsConvertToPrivateSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminConversationsConvertToPrivateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.conversations.convertToPrivate');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminConversationsConvertToPrivateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsConvertToPrivateSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsConvertToPrivateErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a public or private channel-based conversation.
     * 
     * https://api.slack.com/methods/admin.conversations.create - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsCreateRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsCreateSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminConversationsCreateResponse
     * @see https://api.slack.com/methods/admin.conversations.create
     */
	
    public function adminConversationsCreate(
        \shadowcodex\slackspec\Models\Operations\AdminConversationsCreateRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminConversationsCreateSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminConversationsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.conversations.create');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminConversationsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsCreateSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsCreateErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a public or private channel.
     * 
     * https://api.slack.com/methods/admin.conversations.delete - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsDeleteRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsDeleteSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminConversationsDeleteResponse
     * @see https://api.slack.com/methods/admin.conversations.delete
     */
	
    public function adminConversationsDelete(
        \shadowcodex\slackspec\Models\Operations\AdminConversationsDeleteRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminConversationsDeleteSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminConversationsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.conversations.delete');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminConversationsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsDeleteSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsDeleteErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Disconnect a connected channel from one or more workspaces.
     * 
     * https://api.slack.com/methods/admin.conversations.disconnectShared - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsDisconnectSharedRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsDisconnectSharedSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminConversationsDisconnectSharedResponse
     * @see https://api.slack.com/methods/admin.conversations.disconnectShared
     */
	
    public function adminConversationsDisconnectShared(
        \shadowcodex\slackspec\Models\Operations\AdminConversationsDisconnectSharedRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminConversationsDisconnectSharedSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminConversationsDisconnectSharedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.conversations.disconnectShared');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminConversationsDisconnectSharedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsRenameSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsDisconnectSharedErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get conversation preferences for a public or private channel.
     * 
     * https://api.slack.com/methods/admin.conversations.getConversationPrefs - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsGetConversationPrefsRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsGetConversationPrefsSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminConversationsGetConversationPrefsResponse
     * @see https://api.slack.com/methods/admin.conversations.getConversationPrefs
     */
	
    public function adminConversationsGetConversationPrefs(
        \shadowcodex\slackspec\Models\Operations\AdminConversationsGetConversationPrefsRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminConversationsGetConversationPrefsSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminConversationsGetConversationPrefsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.conversations.getConversationPrefs');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\shadowcodex\slackspec\Models\Operations\AdminConversationsGetConversationPrefsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminConversationsGetConversationPrefsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsGetConversationPrefsSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsUnarchiveErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all the workspaces a given public or private channel is connected to within this Enterprise org.
     * 
     * https://api.slack.com/methods/admin.conversations.getTeams - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsGetTeamsRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsGetTeamsSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminConversationsGetTeamsResponse
     * @see https://api.slack.com/methods/admin.conversations.getTeams
     */
	
    public function adminConversationsGetTeams(
        \shadowcodex\slackspec\Models\Operations\AdminConversationsGetTeamsRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminConversationsGetTeamsSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminConversationsGetTeamsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.conversations.getTeams');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\shadowcodex\slackspec\Models\Operations\AdminConversationsGetTeamsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminConversationsGetTeamsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsGetTeamsSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsGetTeamsErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Invite a user to a public or private channel.
     * 
     * https://api.slack.com/methods/admin.conversations.invite - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsInviteRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsInviteSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminConversationsInviteResponse
     * @see https://api.slack.com/methods/admin.conversations.invite
     */
	
    public function adminConversationsInvite(
        \shadowcodex\slackspec\Models\Operations\AdminConversationsInviteRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminConversationsInviteSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminConversationsInviteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.conversations.invite');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminConversationsInviteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsInviteSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsInviteErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Rename a public or private channel.
     * 
     * https://api.slack.com/methods/admin.conversations.rename - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsRenameRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsRenameSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminConversationsRenameResponse
     * @see https://api.slack.com/methods/admin.conversations.rename
     */
	
    public function adminConversationsRename(
        \shadowcodex\slackspec\Models\Operations\AdminConversationsRenameRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminConversationsRenameSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminConversationsRenameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.conversations.rename');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminConversationsRenameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsRenameSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsUnarchiveErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Search for public or private channels in an Enterprise organization.
     * 
     * https://api.slack.com/methods/admin.conversations.search - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsSearchRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsSearchSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminConversationsSearchResponse
     * @see https://api.slack.com/methods/admin.conversations.search
     */
	
    public function adminConversationsSearch(
        \shadowcodex\slackspec\Models\Operations\AdminConversationsSearchRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminConversationsSearchSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminConversationsSearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.conversations.search');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\shadowcodex\slackspec\Models\Operations\AdminConversationsSearchRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminConversationsSearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsSearchSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsSearchErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Set the posting permissions for a public or private channel.
     * 
     * https://api.slack.com/methods/admin.conversations.setConversationPrefs - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsSetConversationPrefsRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsSetConversationPrefsSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminConversationsSetConversationPrefsResponse
     * @see https://api.slack.com/methods/admin.conversations.setConversationPrefs
     */
	
    public function adminConversationsSetConversationPrefs(
        \shadowcodex\slackspec\Models\Operations\AdminConversationsSetConversationPrefsRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminConversationsSetConversationPrefsSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminConversationsSetConversationPrefsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.conversations.setConversationPrefs');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminConversationsSetConversationPrefsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsSetConversationPrefsSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsSetConversationPrefsErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Set the workspaces in an Enterprise grid org that connect to a public or private channel.
     * 
     * https://api.slack.com/methods/admin.conversations.setTeams - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsSetTeamsRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsSetTeamsSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminConversationsSetTeamsResponse
     * @see https://api.slack.com/methods/admin.conversations.setTeams
     */
	
    public function adminConversationsSetTeams(
        \shadowcodex\slackspec\Models\Operations\AdminConversationsSetTeamsRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminConversationsSetTeamsSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminConversationsSetTeamsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.conversations.setTeams');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminConversationsSetTeamsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Unarchive a public or private channel.
     * 
     * https://api.slack.com/methods/admin.conversations.unarchive - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsUnarchiveRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminConversationsUnarchiveSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminConversationsUnarchiveResponse
     * @see https://api.slack.com/methods/admin.conversations.unarchive
     */
	
    public function adminConversationsUnarchive(
        \shadowcodex\slackspec\Models\Operations\AdminConversationsUnarchiveRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminConversationsUnarchiveSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminConversationsUnarchiveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.conversations.unarchive');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminConversationsUnarchiveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsUnarchiveSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminConversationsUnarchiveErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
}