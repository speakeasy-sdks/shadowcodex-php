<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace shadowcodex\slackspec;

class AdminUsers 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add an Enterprise user to a workspace.
     * 
     * https://api.slack.com/methods/admin.users.assign - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminUsersAssignRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminUsersAssignSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminUsersAssignResponse
     * @see https://api.slack.com/methods/admin.users.assign
     */
	
    public function adminUsersAssign(
        \shadowcodex\slackspec\Models\Operations\AdminUsersAssignRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminUsersAssignSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminUsersAssignResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.users.assign');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminUsersAssignResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Invite a user to a workspace.
     * 
     * https://api.slack.com/methods/admin.users.invite - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminUsersInviteRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminUsersInviteSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminUsersInviteResponse
     * @see https://api.slack.com/methods/admin.users.invite
     */
	
    public function adminUsersInvite(
        \shadowcodex\slackspec\Models\Operations\AdminUsersInviteRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminUsersInviteSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminUsersInviteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.users.invite');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminUsersInviteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List users on a workspace
     * 
     * https://api.slack.com/methods/admin.users.list - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminUsersListRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminUsersListSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminUsersListResponse
     * @see https://api.slack.com/methods/admin.users.list
     */
	
    public function adminUsersList(
        \shadowcodex\slackspec\Models\Operations\AdminUsersListRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminUsersListSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminUsersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.users.list');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\shadowcodex\slackspec\Models\Operations\AdminUsersListRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminUsersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove a user from a workspace.
     * 
     * https://api.slack.com/methods/admin.users.remove - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminUsersRemoveRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminUsersRemoveSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminUsersRemoveResponse
     * @see https://api.slack.com/methods/admin.users.remove
     */
	
    public function adminUsersRemove(
        \shadowcodex\slackspec\Models\Operations\AdminUsersRemoveRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminUsersRemoveSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminUsersRemoveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.users.remove');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminUsersRemoveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Set an existing guest, regular user, or owner to be an admin user.
     * 
     * https://api.slack.com/methods/admin.users.setAdmin - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminUsersSetAdminRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminUsersSetAdminSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminUsersSetAdminResponse
     * @see https://api.slack.com/methods/admin.users.setAdmin
     */
	
    public function adminUsersSetAdmin(
        \shadowcodex\slackspec\Models\Operations\AdminUsersSetAdminRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminUsersSetAdminSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminUsersSetAdminResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.users.setAdmin');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminUsersSetAdminResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Set an expiration for a guest user
     * 
     * https://api.slack.com/methods/admin.users.setExpiration - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminUsersSetExpirationRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminUsersSetExpirationSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminUsersSetExpirationResponse
     * @see https://api.slack.com/methods/admin.users.setExpiration
     */
	
    public function adminUsersSetExpiration(
        \shadowcodex\slackspec\Models\Operations\AdminUsersSetExpirationRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminUsersSetExpirationSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminUsersSetExpirationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.users.setExpiration');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminUsersSetExpirationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Set an existing guest, regular user, or admin user to be a workspace owner.
     * 
     * https://api.slack.com/methods/admin.users.setOwner - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminUsersSetOwnerRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminUsersSetOwnerSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminUsersSetOwnerResponse
     * @see https://api.slack.com/methods/admin.users.setOwner
     */
	
    public function adminUsersSetOwner(
        \shadowcodex\slackspec\Models\Operations\AdminUsersSetOwnerRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminUsersSetOwnerSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminUsersSetOwnerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.users.setOwner');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminUsersSetOwnerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Set an existing guest user, admin user, or owner to be a regular user.
     * 
     * https://api.slack.com/methods/admin.users.setRegular - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\AdminUsersSetRegularRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\AdminUsersSetRegularSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\AdminUsersSetRegularResponse
     * @see https://api.slack.com/methods/admin.users.setRegular
     */
	
    public function adminUsersSetRegular(
        \shadowcodex\slackspec\Models\Operations\AdminUsersSetRegularRequest $request,
        \shadowcodex\slackspec\Models\Operations\AdminUsersSetRegularSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\AdminUsersSetRegularResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin.users.setRegular');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\AdminUsersSetRegularResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
}