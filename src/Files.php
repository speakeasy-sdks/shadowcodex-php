<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace shadowcodex\slackspec;

class Files 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes an existing comment on a file.
     * 
     * https://api.slack.com/methods/files.comments.delete - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\FilesCommentsDeleteRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\FilesCommentsDeleteSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\FilesCommentsDeleteResponse
     * @see https://api.slack.com/methods/files.comments.delete
     */
	
    public function filesCommentsDelete(
        \shadowcodex\slackspec\Models\Operations\FilesCommentsDeleteRequest $request,
        \shadowcodex\slackspec\Models\Operations\FilesCommentsDeleteSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\FilesCommentsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/files.comments.delete');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\FilesCommentsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->filesCommentsDeleteSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->filesCommentsDeleteErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a file.
     * 
     * https://api.slack.com/methods/files.delete - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\FilesDeleteRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\FilesDeleteSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\FilesDeleteResponse
     * @see https://api.slack.com/methods/files.delete
     */
	
    public function filesDelete(
        \shadowcodex\slackspec\Models\Operations\FilesDeleteRequest $request,
        \shadowcodex\slackspec\Models\Operations\FilesDeleteSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\FilesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/files.delete');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\FilesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->filesDeleteSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->filesDeleteErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets information about a file.
     * 
     * https://api.slack.com/methods/files.info - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\FilesInfoRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\FilesInfoSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\FilesInfoResponse
     * @see https://api.slack.com/methods/files.info
     */
	
    public function filesInfo(
        \shadowcodex\slackspec\Models\Operations\FilesInfoRequest $request,
        \shadowcodex\slackspec\Models\Operations\FilesInfoSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\FilesInfoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/files.info');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\shadowcodex\slackspec\Models\Operations\FilesInfoRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\FilesInfoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->filesInfoSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->filesInfoErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List for a team, in a channel, or from a user with applied filters.
     * 
     * https://api.slack.com/methods/files.list - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\FilesListRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\FilesListSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\FilesListResponse
     * @see https://api.slack.com/methods/files.list
     */
	
    public function filesList(
        \shadowcodex\slackspec\Models\Operations\FilesListRequest $request,
        \shadowcodex\slackspec\Models\Operations\FilesListSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\FilesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/files.list');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\shadowcodex\slackspec\Models\Operations\FilesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\FilesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->filesListSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->filesListErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Adds a file from a remote service
     * 
     * https://api.slack.com/methods/files.remote.add - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\FilesRemoteAddRequestBody $request
     * @param \shadowcodex\slackspec\Models\Operations\FilesRemoteAddSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\FilesRemoteAddResponse
     * @see https://api.slack.com/methods/files.remote.add
     */
	
    public function filesRemoteAdd(
        \shadowcodex\slackspec\Models\Operations\FilesRemoteAddRequestBody $request,
        \shadowcodex\slackspec\Models\Operations\FilesRemoteAddSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\FilesRemoteAddResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/files.remote.add');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\FilesRemoteAddResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve information about a remote file added to Slack
     * 
     * https://api.slack.com/methods/files.remote.info - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\FilesRemoteInfoRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\FilesRemoteInfoSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\FilesRemoteInfoResponse
     * @see https://api.slack.com/methods/files.remote.info
     */
	
    public function filesRemoteInfo(
        \shadowcodex\slackspec\Models\Operations\FilesRemoteInfoRequest $request,
        \shadowcodex\slackspec\Models\Operations\FilesRemoteInfoSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\FilesRemoteInfoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/files.remote.info');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\shadowcodex\slackspec\Models\Operations\FilesRemoteInfoRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\FilesRemoteInfoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve information about a remote file added to Slack
     * 
     * https://api.slack.com/methods/files.remote.list - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\FilesRemoteListRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\FilesRemoteListSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\FilesRemoteListResponse
     * @see https://api.slack.com/methods/files.remote.list
     */
	
    public function filesRemoteList(
        \shadowcodex\slackspec\Models\Operations\FilesRemoteListRequest $request,
        \shadowcodex\slackspec\Models\Operations\FilesRemoteListSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\FilesRemoteListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/files.remote.list');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\shadowcodex\slackspec\Models\Operations\FilesRemoteListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\FilesRemoteListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove a remote file.
     * 
     * https://api.slack.com/methods/files.remote.remove - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\FilesRemoteRemoveRequestBody $request
     * @param \shadowcodex\slackspec\Models\Operations\FilesRemoteRemoveSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\FilesRemoteRemoveResponse
     * @see https://api.slack.com/methods/files.remote.remove
     */
	
    public function filesRemoteRemove(
        \shadowcodex\slackspec\Models\Operations\FilesRemoteRemoveRequestBody $request,
        \shadowcodex\slackspec\Models\Operations\FilesRemoteRemoveSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\FilesRemoteRemoveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/files.remote.remove');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\FilesRemoteRemoveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Share a remote file into a channel.
     * 
     * https://api.slack.com/methods/files.remote.share - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\FilesRemoteShareRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\FilesRemoteShareSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\FilesRemoteShareResponse
     * @see https://api.slack.com/methods/files.remote.share
     */
	
    public function filesRemoteShare(
        \shadowcodex\slackspec\Models\Operations\FilesRemoteShareRequest $request,
        \shadowcodex\slackspec\Models\Operations\FilesRemoteShareSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\FilesRemoteShareResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/files.remote.share');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\shadowcodex\slackspec\Models\Operations\FilesRemoteShareRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\FilesRemoteShareResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing remote file.
     * 
     * https://api.slack.com/methods/files.remote.update - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\FilesRemoteUpdateRequestBody $request
     * @param \shadowcodex\slackspec\Models\Operations\FilesRemoteUpdateSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\FilesRemoteUpdateResponse
     * @see https://api.slack.com/methods/files.remote.update
     */
	
    public function filesRemoteUpdate(
        \shadowcodex\slackspec\Models\Operations\FilesRemoteUpdateRequestBody $request,
        \shadowcodex\slackspec\Models\Operations\FilesRemoteUpdateSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\FilesRemoteUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/files.remote.update');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\FilesRemoteUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultSuccessTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultErrorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Revokes public/external sharing access for a file
     * 
     * https://api.slack.com/methods/files.revokePublicURL - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\FilesRevokePublicURLRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\FilesRevokePublicURLSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\FilesRevokePublicURLResponse
     * @see https://api.slack.com/methods/files.revokePublicURL
     */
	
    public function filesRevokePublicURL(
        \shadowcodex\slackspec\Models\Operations\FilesRevokePublicURLRequest $request,
        \shadowcodex\slackspec\Models\Operations\FilesRevokePublicURLSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\FilesRevokePublicURLResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/files.revokePublicURL');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\FilesRevokePublicURLResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->filesRevokePublicURLSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->filesRevokePublicURLErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Enables a file for public/external sharing.
     * 
     * https://api.slack.com/methods/files.sharedPublicURL - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\FilesSharedPublicURLRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\FilesSharedPublicURLSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\FilesSharedPublicURLResponse
     * @see https://api.slack.com/methods/files.sharedPublicURL
     */
	
    public function filesSharedPublicURL(
        \shadowcodex\slackspec\Models\Operations\FilesSharedPublicURLRequest $request,
        \shadowcodex\slackspec\Models\Operations\FilesSharedPublicURLSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\FilesSharedPublicURLResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/files.sharedPublicURL');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\FilesSharedPublicURLResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->filesSharedPublicURLSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->filesSharedPublicURLErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Uploads or creates a file.
     * 
     * https://api.slack.com/methods/files.upload - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\FilesUploadRequestBody $request
     * @param \shadowcodex\slackspec\Models\Operations\FilesUploadSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\FilesUploadResponse
     * @see https://api.slack.com/methods/files.upload
     */
	
    public function filesUpload(
        \shadowcodex\slackspec\Models\Operations\FilesUploadRequestBody $request,
        \shadowcodex\slackspec\Models\Operations\FilesUploadSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\FilesUploadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/files.upload');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\FilesUploadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->filesUploadSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->filesUploadErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
}