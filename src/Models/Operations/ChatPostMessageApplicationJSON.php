<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace shadowcodex\slackspec\Models\Operations;


class ChatPostMessageApplicationJSON
{
    /**
     * Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](#authorship) below.
     * 
     * @var ?string $asUser
     */
	#[\JMS\Serializer\Annotation\SerializedName('as_user')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $asUser = null;
    
    /**
     * A JSON-based array of structured attachments, presented as a URL-encoded string.
     * 
     * @var ?string $attachments
     */
	#[\JMS\Serializer\Annotation\SerializedName('attachments')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $attachments = null;
    
    /**
     * A JSON-based array of structured blocks, presented as a URL-encoded string.
     * 
     * @var ?string $blocks
     */
	#[\JMS\Serializer\Annotation\SerializedName('blocks')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $blocks = null;
    
    /**
     * Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details.
     * 
     * @var string $channel
     */
	#[\JMS\Serializer\Annotation\SerializedName('channel')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $channel;
    
    /**
     * Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](#authorship) below.
     * 
     * @var ?string $iconEmoji
     */
	#[\JMS\Serializer\Annotation\SerializedName('icon_emoji')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $iconEmoji = null;
    
    /**
     * URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below.
     * 
     * @var ?string $iconUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('icon_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $iconUrl = null;
    
    /**
     * Find and link channel names and usernames.
     * 
     * @var ?bool $linkNames
     */
	#[\JMS\Serializer\Annotation\SerializedName('link_names')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $linkNames = null;
    
    /**
     * Disable Slack markup parsing by setting to `false`. Enabled by default.
     * 
     * @var ?bool $mrkdwn
     */
	#[\JMS\Serializer\Annotation\SerializedName('mrkdwn')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $mrkdwn = null;
    
    /**
     * Change how messages are treated. Defaults to `none`. See [below](#formatting).
     * 
     * @var ?string $parse
     */
	#[\JMS\Serializer\Annotation\SerializedName('parse')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $parse = null;
    
    /**
     * Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`.
     * 
     * @var ?bool $replyBroadcast
     */
	#[\JMS\Serializer\Annotation\SerializedName('reply_broadcast')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $replyBroadcast = null;
    
    /**
     * How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail.
     * 
     * @var ?string $text
     */
	#[\JMS\Serializer\Annotation\SerializedName('text')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $text = null;
    
    /**
     * Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead.
     * 
     * @var ?string $threadTs
     */
	#[\JMS\Serializer\Annotation\SerializedName('thread_ts')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $threadTs = null;
    
    /**
     * Pass true to enable unfurling of primarily text-based content.
     * 
     * @var ?bool $unfurlLinks
     */
	#[\JMS\Serializer\Annotation\SerializedName('unfurl_links')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $unfurlLinks = null;
    
    /**
     * Pass false to disable unfurling of media content.
     * 
     * @var ?bool $unfurlMedia
     */
	#[\JMS\Serializer\Annotation\SerializedName('unfurl_media')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $unfurlMedia = null;
    
    /**
     * Set your bot's user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below.
     * 
     * @var ?string $username
     */
	#[\JMS\Serializer\Annotation\SerializedName('username')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $username = null;
    
	public function __construct()
	{
		$this->asUser = null;
		$this->attachments = null;
		$this->blocks = null;
		$this->channel = "";
		$this->iconEmoji = null;
		$this->iconUrl = null;
		$this->linkNames = null;
		$this->mrkdwn = null;
		$this->parse = null;
		$this->replyBroadcast = null;
		$this->text = null;
		$this->threadTs = null;
		$this->unfurlLinks = null;
		$this->unfurlMedia = null;
		$this->username = null;
	}
}
