<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace shadowcodex\slackspec\Models\Operations;


class ChatUpdateApplicationJSON
{
    /**
     * Pass true to update the message as the authed user. [Bot users](/bot-users) in this context are considered authed users.
     * 
     * @var ?string $asUser
     */
	#[\JMS\Serializer\Annotation\SerializedName('as_user')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $asUser = null;
    
    /**
     * A JSON-based array of structured attachments, presented as a URL-encoded string. This field is required when not presenting `text`. If you don't include this field, the message's previous `attachments` will be retained. To remove previous `attachments`, include an empty array for this field.
     * 
     * @var ?string $attachments
     */
	#[\JMS\Serializer\Annotation\SerializedName('attachments')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $attachments = null;
    
    /**
     * A JSON-based array of [structured blocks](/block-kit/building), presented as a URL-encoded string. If you don't include this field, the message's previous `blocks` will be retained. To remove previous `blocks`, include an empty array for this field.
     * 
     * @var ?string $blocks
     */
	#[\JMS\Serializer\Annotation\SerializedName('blocks')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $blocks = null;
    
    /**
     * Channel containing the message to be updated.
     * 
     * @var string $channel
     */
	#[\JMS\Serializer\Annotation\SerializedName('channel')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $channel;
    
    /**
     * Find and link channel names and usernames. Defaults to `none`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `none`.
     * 
     * @var ?string $linkNames
     */
	#[\JMS\Serializer\Annotation\SerializedName('link_names')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $linkNames = null;
    
    /**
     * Change how messages are treated. Defaults to `client`, unlike `chat.postMessage`. Accepts either `none` or `full`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `client`.
     * 
     * @var ?string $parse
     */
	#[\JMS\Serializer\Annotation\SerializedName('parse')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $parse = null;
    
    /**
     * New text for the message, using the [default formatting rules](/reference/surfaces/formatting). It's not required when presenting `blocks` or `attachments`.
     * 
     * @var ?string $text
     */
	#[\JMS\Serializer\Annotation\SerializedName('text')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $text = null;
    
    /**
     * Timestamp of the message to be updated.
     * 
     * @var string $ts
     */
	#[\JMS\Serializer\Annotation\SerializedName('ts')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $ts;
    
	public function __construct()
	{
		$this->asUser = null;
		$this->attachments = null;
		$this->blocks = null;
		$this->channel = "";
		$this->linkNames = null;
		$this->parse = null;
		$this->text = null;
		$this->ts = "";
	}
}
