<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace shadowcodex\slackspec\Models\Operations;

use \shadowcodex\slackspec\Utils\SpeakeasyMetadata;
class AdminConversationsSearchRequest
{
    /**
     * Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.
     * 
     * @var ?string $cursor
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=cursor')]
    public ?string $cursor = null;
    
    /**
     * Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10.
     * 
     * @var ?int $limit
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=limit')]
    public ?int $limit = null;
    
    /**
     * Name of the the channel to query by.
     * 
     * @var ?string $query
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=query')]
    public ?string $query = null;
    
    /**
     * The type of channel to include or exclude in the search. For example `private` will search private channels, while `private_exclude` will exclude them. For a full list of types, check the [Types section](#types).
     * 
     * @var ?string $searchChannelTypes
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=search_channel_types')]
    public ?string $searchChannelTypes = null;
    
    /**
     * Possible values are `relevant` (search ranking based on what we think is closest), `name` (alphabetical), `member_count` (number of users in the channel), and `created` (date channel was created). You can optionally pair this with the `sort_dir` arg to change how it is sorted 
     * 
     * @var ?string $sort
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=sort')]
    public ?string $sort = null;
    
    /**
     * Sort direction. Possible values are `asc` for ascending order like (1, 2, 3) or (a, b, c), and `desc` for descending order like (3, 2, 1) or (c, b, a)
     * 
     * @var ?string $sortDir
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=sort_dir')]
    public ?string $sortDir = null;
    
    /**
     * Comma separated string of team IDs, signifying the workspaces to search through.
     * 
     * @var ?string $teamIds
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=team_ids')]
    public ?string $teamIds = null;
    
    /**
     * Authentication token. Requires scope: `admin.conversations:read`
     * 
     * @var string $token
     */
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=token')]
    public string $token;
    
	public function __construct()
	{
		$this->cursor = null;
		$this->limit = null;
		$this->query = null;
		$this->searchChannelTypes = null;
		$this->sort = null;
		$this->sortDir = null;
		$this->teamIds = null;
		$this->token = "";
	}
}
