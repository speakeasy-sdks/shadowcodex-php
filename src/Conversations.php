<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace shadowcodex\slackspec;

class Conversations 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Archives a conversation.
     * 
     * https://api.slack.com/methods/conversations.archive - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\ConversationsArchiveRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\ConversationsArchiveSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\ConversationsArchiveResponse
     * @see https://api.slack.com/methods/conversations.archive
     */
	
    public function conversationsArchive(
        \shadowcodex\slackspec\Models\Operations\ConversationsArchiveRequest $request,
        \shadowcodex\slackspec\Models\Operations\ConversationsArchiveSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\ConversationsArchiveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations.archive');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\ConversationsArchiveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsArchiveSuccessSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsArchiveErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Closes a direct message or multi-person direct message.
     * 
     * https://api.slack.com/methods/conversations.close - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\ConversationsCloseRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\ConversationsCloseSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\ConversationsCloseResponse
     * @see https://api.slack.com/methods/conversations.close
     */
	
    public function conversationsClose(
        \shadowcodex\slackspec\Models\Operations\ConversationsCloseRequest $request,
        \shadowcodex\slackspec\Models\Operations\ConversationsCloseSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\ConversationsCloseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations.close');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\ConversationsCloseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsCloseSuccessSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsCloseErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Initiates a public or private channel-based conversation
     * 
     * https://api.slack.com/methods/conversations.create - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\ConversationsCreateRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\ConversationsCreateSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\ConversationsCreateResponse
     * @see https://api.slack.com/methods/conversations.create
     */
	
    public function conversationsCreate(
        \shadowcodex\slackspec\Models\Operations\ConversationsCreateRequest $request,
        \shadowcodex\slackspec\Models\Operations\ConversationsCreateSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\ConversationsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations.create');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\ConversationsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsCreateSuccessSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsCreateErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetches a conversation's history of messages and events.
     * 
     * https://api.slack.com/methods/conversations.history - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\ConversationsHistoryRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\ConversationsHistorySecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\ConversationsHistoryResponse
     * @see https://api.slack.com/methods/conversations.history
     */
	
    public function conversationsHistory(
        \shadowcodex\slackspec\Models\Operations\ConversationsHistoryRequest $request,
        \shadowcodex\slackspec\Models\Operations\ConversationsHistorySecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\ConversationsHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations.history');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\shadowcodex\slackspec\Models\Operations\ConversationsHistoryRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\ConversationsHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsHistorySuccessSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsHistoryErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve information about a conversation.
     * 
     * https://api.slack.com/methods/conversations.info - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\ConversationsInfoRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\ConversationsInfoSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\ConversationsInfoResponse
     * @see https://api.slack.com/methods/conversations.info
     */
	
    public function conversationsInfo(
        \shadowcodex\slackspec\Models\Operations\ConversationsInfoRequest $request,
        \shadowcodex\slackspec\Models\Operations\ConversationsInfoSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\ConversationsInfoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations.info');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\shadowcodex\slackspec\Models\Operations\ConversationsInfoRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\ConversationsInfoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsInfoSuccessSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsInfoErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Invites users to a channel.
     * 
     * https://api.slack.com/methods/conversations.invite - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\ConversationsInviteRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\ConversationsInviteSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\ConversationsInviteResponse
     * @see https://api.slack.com/methods/conversations.invite
     */
	
    public function conversationsInvite(
        \shadowcodex\slackspec\Models\Operations\ConversationsInviteRequest $request,
        \shadowcodex\slackspec\Models\Operations\ConversationsInviteSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\ConversationsInviteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations.invite');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\ConversationsInviteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsInviteErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Joins an existing conversation.
     * 
     * https://api.slack.com/methods/conversations.join - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\ConversationsJoinRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\ConversationsJoinSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\ConversationsJoinResponse
     * @see https://api.slack.com/methods/conversations.join
     */
	
    public function conversationsJoin(
        \shadowcodex\slackspec\Models\Operations\ConversationsJoinRequest $request,
        \shadowcodex\slackspec\Models\Operations\ConversationsJoinSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\ConversationsJoinResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations.join');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\ConversationsJoinResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsJoinSuccessSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsJoinErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes a user from a conversation.
     * 
     * https://api.slack.com/methods/conversations.kick - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\ConversationsKickRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\ConversationsKickSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\ConversationsKickResponse
     * @see https://api.slack.com/methods/conversations.kick
     */
	
    public function conversationsKick(
        \shadowcodex\slackspec\Models\Operations\ConversationsKickRequest $request,
        \shadowcodex\slackspec\Models\Operations\ConversationsKickSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\ConversationsKickResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations.kick');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\ConversationsKickResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsKickSuccessSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsKickErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Leaves a conversation.
     * 
     * https://api.slack.com/methods/conversations.leave - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\ConversationsLeaveRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\ConversationsLeaveSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\ConversationsLeaveResponse
     * @see https://api.slack.com/methods/conversations.leave
     */
	
    public function conversationsLeave(
        \shadowcodex\slackspec\Models\Operations\ConversationsLeaveRequest $request,
        \shadowcodex\slackspec\Models\Operations\ConversationsLeaveSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\ConversationsLeaveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations.leave');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\ConversationsLeaveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsLeaveSuccessSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsLeaveErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all channels in a Slack team.
     * 
     * https://api.slack.com/methods/conversations.list - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\ConversationsListRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\ConversationsListSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\ConversationsListResponse
     * @see https://api.slack.com/methods/conversations.list
     */
	
    public function conversationsList(
        \shadowcodex\slackspec\Models\Operations\ConversationsListRequest $request,
        \shadowcodex\slackspec\Models\Operations\ConversationsListSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\ConversationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations.list');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\shadowcodex\slackspec\Models\Operations\ConversationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\ConversationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsListSuccessSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsListErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the read cursor in a channel.
     * 
     * https://api.slack.com/methods/conversations.mark - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\ConversationsMarkRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\ConversationsMarkSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\ConversationsMarkResponse
     * @see https://api.slack.com/methods/conversations.mark
     */
	
    public function conversationsMark(
        \shadowcodex\slackspec\Models\Operations\ConversationsMarkRequest $request,
        \shadowcodex\slackspec\Models\Operations\ConversationsMarkSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\ConversationsMarkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations.mark');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\ConversationsMarkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsMarkSuccessSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsMarkErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve members of a conversation.
     * 
     * https://api.slack.com/methods/conversations.members - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\ConversationsMembersRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\ConversationsMembersSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\ConversationsMembersResponse
     * @see https://api.slack.com/methods/conversations.members
     */
	
    public function conversationsMembers(
        \shadowcodex\slackspec\Models\Operations\ConversationsMembersRequest $request,
        \shadowcodex\slackspec\Models\Operations\ConversationsMembersSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\ConversationsMembersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations.members');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\shadowcodex\slackspec\Models\Operations\ConversationsMembersRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\ConversationsMembersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsMembersSuccessSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsMembersErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Opens or resumes a direct message or multi-person direct message.
     * 
     * https://api.slack.com/methods/conversations.open - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\ConversationsOpenRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\ConversationsOpenSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\ConversationsOpenResponse
     * @see https://api.slack.com/methods/conversations.open
     */
	
    public function conversationsOpen(
        \shadowcodex\slackspec\Models\Operations\ConversationsOpenRequest $request,
        \shadowcodex\slackspec\Models\Operations\ConversationsOpenSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\ConversationsOpenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations.open');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\ConversationsOpenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsOpenSuccessSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsOpenErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Renames a conversation.
     * 
     * https://api.slack.com/methods/conversations.rename - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\ConversationsRenameRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\ConversationsRenameSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\ConversationsRenameResponse
     * @see https://api.slack.com/methods/conversations.rename
     */
	
    public function conversationsRename(
        \shadowcodex\slackspec\Models\Operations\ConversationsRenameRequest $request,
        \shadowcodex\slackspec\Models\Operations\ConversationsRenameSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\ConversationsRenameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations.rename');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\ConversationsRenameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsRenameSuccessSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsRenameErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a thread of messages posted to a conversation
     * 
     * https://api.slack.com/methods/conversations.replies - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\ConversationsRepliesRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\ConversationsRepliesSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\ConversationsRepliesResponse
     * @see https://api.slack.com/methods/conversations.replies
     */
	
    public function conversationsReplies(
        \shadowcodex\slackspec\Models\Operations\ConversationsRepliesRequest $request,
        \shadowcodex\slackspec\Models\Operations\ConversationsRepliesSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\ConversationsRepliesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations.replies');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\shadowcodex\slackspec\Models\Operations\ConversationsRepliesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\ConversationsRepliesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsRepliesSuccessSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsRepliesErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the purpose for a conversation.
     * 
     * https://api.slack.com/methods/conversations.setPurpose - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\ConversationsSetPurposeRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\ConversationsSetPurposeSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\ConversationsSetPurposeResponse
     * @see https://api.slack.com/methods/conversations.setPurpose
     */
	
    public function conversationsSetPurpose(
        \shadowcodex\slackspec\Models\Operations\ConversationsSetPurposeRequest $request,
        \shadowcodex\slackspec\Models\Operations\ConversationsSetPurposeSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\ConversationsSetPurposeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations.setPurpose');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\ConversationsSetPurposeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsSetPurposeSuccessSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsSetPurposeErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the topic for a conversation.
     * 
     * https://api.slack.com/methods/conversations.setTopic - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\ConversationsSetTopicRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\ConversationsSetTopicSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\ConversationsSetTopicResponse
     * @see https://api.slack.com/methods/conversations.setTopic
     */
	
    public function conversationsSetTopic(
        \shadowcodex\slackspec\Models\Operations\ConversationsSetTopicRequest $request,
        \shadowcodex\slackspec\Models\Operations\ConversationsSetTopicSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\ConversationsSetTopicResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations.setTopic');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\ConversationsSetTopicResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsSetTopicSuccessSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsSetTopicErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Reverses conversation archival.
     * 
     * https://api.slack.com/methods/conversations.unarchive - API method documentation
     * 
     * @param \shadowcodex\slackspec\Models\Operations\ConversationsUnarchiveRequest $request
     * @param \shadowcodex\slackspec\Models\Operations\ConversationsUnarchiveSecurity $security
     * @return \shadowcodex\slackspec\Models\Operations\ConversationsUnarchiveResponse
     * @see https://api.slack.com/methods/conversations.unarchive
     */
	
    public function conversationsUnarchive(
        \shadowcodex\slackspec\Models\Operations\ConversationsUnarchiveRequest $request,
        \shadowcodex\slackspec\Models\Operations\ConversationsUnarchiveSecurity $security,
    ): \shadowcodex\slackspec\Models\Operations\ConversationsUnarchiveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations.unarchive');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \shadowcodex\slackspec\Models\Operations\ConversationsUnarchiveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsUnarchiveSuccessSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsUnarchiveErrorSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
}